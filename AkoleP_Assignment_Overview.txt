Project 1: Overview and Technical Impression




The primary focus of the project is to understand the challenge of designing a communication protocol while implementing operations (PUT, GET, DELETE) in a key-value store using TCP and UDP protocols. It creates a single-threaded key-value store that focuses on the basics of request handling without involving concurrency. The assignment focuses on providing knowledge of socket programming and system design. Working with both TCP and UDP in parallel highlighted their distinct characteristics like TCP's reliability compared with UDP’s speed, particularly while implementing error handling and timeout functionality. The project hence highlights the significance of logging, and error handling in systems which is one of the major factors in designing a reliable distributed system. This project also introduced Docker which is currently an important part of modern distributed systems. This introduction to Docker provides a new and important skill set for managing and deploying distributed systems in real-world scenarios, where containerization is increasingly becoming important for scaling systems. Docker ensures that the system is consistent across environments. The project served as an introduction to key concepts in distributed systems, combining theory with practical knowledge that is directly applicable to modern development practices.


While the implementation seemed to be easy, it improved the understanding of socket programming. One of the challenges was to implement a single-threaded key-value store. It made my understanding of the concepts of concurrency, multithreading, and communication protocols in-depth. In addition, the logging with millisecond precision helped in understanding the critical role of detailed system monitoring in distributed systems that aid in debugging. Another challenge I faced was learning to use docker to containerize the code and run it. Reading the documentation, learning how to build an image, and running it helped me explore and learn more about Docker.   


Creating a well-factored and well-documented code was useful as it used various software development design concepts such as Don’t Repeat Yourself (DRY), You Aren't Gonna Need It (YAGNI), Do It Once, etc. It emphasized the need to design the code well so that it can be understood by other developers who might work on the code. Scalability is another important factor in designing a distributed system which can be achieved by writing well-factored code. In conclusion, the project posed a few challenges but it was a good learning experience and a good introduction to system design.
 
One of the real-world applications of the project is an active leaderboard in a multiplayer game. It is a very simple application of the project where the leaderboard will store the scores of the players. This can use the key-value store project as it needs to quickly update the leaderboard whenever the score of a player changes which affects the rank of the player. This is only one of the many examples of key-value stores like session management in web apps, analytics dashboards, etc.